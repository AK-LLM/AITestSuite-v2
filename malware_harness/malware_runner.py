import subprocess, os, uuid, datetime

def run_llm_generated_code(code: str, lang: str = "python"):
    ext = {"python": "py", "bash": "sh"}[lang]
    tmpdir = f"/tmp/llmtest_{uuid.uuid4().hex}"
    os.makedirs(tmpdir, exist_ok=True)
    codefile = os.path.join(tmpdir, f"malware.{ext}")
    with open(codefile, "w") as f:
        f.write(code)
    log_dir = "./malware_harness/logs"
    os.makedirs(log_dir, exist_ok=True)
    log_path = os.path.join(
        log_dir,
        f"{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{lang}.log"
    )
    try:
        if lang == "python":
            proc = subprocess.run(
                ["python3", codefile],
                capture_output=True, text=True, timeout=15, cwd=tmpdir
            )
        elif lang == "bash":
            proc = subprocess.run(
                ["bash", codefile],
                capture_output=True, text=True, timeout=15, cwd=tmpdir
            )
        # You can add more languages/interpreters as you wish
        with open(log_path, "w") as logf:
            logf.write("=== STDOUT ===\n")
            logf.write(proc.stdout)
            logf.write("\n=== STDERR ===\n")
            logf.write(proc.stderr)
        output = f"Output logged to {log_path}\n"
        if proc.returncode != 0:
            output += f"Non-zero exit: {proc.returncode}\n"
    except Exception as e:
        output = f"Exception: {e}\n"
    finally:
        try: os.remove(codefile)
        except: pass
        try: os.rmdir(tmpdir)
        except: pass
    return output

# Example usage
if __name__ == "__main__":
    # Caution: This code will run on your machine.
    evil_code = """
import os
print("Evil: Reading /etc/passwd")
print(open("/etc/passwd").read())
"""
    print(run_llm_generated_code(evil_code, "python"))
