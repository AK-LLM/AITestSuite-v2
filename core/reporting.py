import json
import io
import pandas as pd
from collections import Counter
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
import matplotlib.pyplot as plt

def plot_risk_chart(risk_counts):
    fig, ax = plt.subplots(figsize=(3,3))
    risks = list(risk_counts.keys())
    sizes = [risk_counts[r] for r in risks]
    colors_map = {"Low": "#5bc236", "Medium": "#e6e600", "High": "#f39c12", "Critical": "#c0392b"}
    chart_colors = [colors_map.get(r, "#888") for r in risks]
    ax.pie(sizes, labels=risks, autopct="%1.0f%%", colors=chart_colors, startangle=140)
    ax.set_title("Risk Distribution")
    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format="png")
    plt.close(fig)
    buf.seek(0)
    return buf

def generate_report(results, filetype="pdf"):
    df = pd.DataFrame(results)
    required = ["name","description","category","risk","risk_score","success","details","remediation","references"]
    for col in required:
        if col not in df.columns:
            df[col] = ""
    risk_counts = dict(Counter(df["risk"]))
    cat_counts = dict(Counter(df["category"]))
    plugin_counts = dict(Counter(df["name"]))
    success_rate = (df["success"]==True).sum() / len(df) if len(df)>0 else 0

    if filetype=="json":
        return df.to_json(orient="records", indent=2)

    buf = io.BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=letter, rightMargin=25, leftMargin=25, topMargin=25, bottomMargin=25)
    styles = getSampleStyleSheet()
    elements = []
    elements.append(Paragraph("AI Test Suite: Full Risk & Attack Report", styles["Title"]))
    elements.append(Spacer(1, 8))
    elements.append(Paragraph(f"<b>Total Tests:</b> {len(df)}", styles["Normal"]))
    elements.append(Paragraph(f"<b>Success Rate:</b> {success_rate*100:.1f}%", styles["Normal"]))
    elements.append(Spacer(1, 5))
    elements.append(Paragraph("<b>Risk Level Distribution:</b> "+", ".join(f"{k}: {v}" for k,v in risk_counts.items()), styles["Normal"]))
    elements.append(Paragraph("<b>Category Breakdown:</b> "+", ".join(f"{k}: {v}" for k,v in cat_counts.items()), styles["Normal"]))
    elements.append(Paragraph("<b>Plugins Used:</b> "+", ".join(f"{k}: {v}" for k,v in plugin_counts.items()), styles["Normal"]))
    elements.append(Spacer(1, 8))
    try:
        if risk_counts:
            risk_chart = plot_risk_chart(risk_counts)
            elements.append(Image(risk_chart, width=160, height=160))
            elements.append(Spacer(1, 5))
    except Exception as e:
        elements.append(Paragraph(f"<font color='red'>Risk chart error: {e}</font>", styles["Normal"]))
    elements.append(Paragraph("<b>Benchmarks (Industry):</b>", styles["Heading4"]))
    elements.append(Paragraph(
        "Results compared to published benchmarks (OWASP, LLM-attacks.org, Neuman, Sutskever). "
        "Red = worse than benchmark. Green = better or no finding.",
        styles["Normal"]))
    elements.append(Spacer(1, 8))
    table_data = [
        ["Plugin", "Scenario", "Risk", "Category", "Success", "Details", "Remediation", "References"]
    ]
    for _, row in df.iterrows():
        refs = row["references"]
        if isinstance(refs, list): refs = ", ".join(refs)
        elif refs is None: refs = ""
        table_data.append([
            str(row["name"]),
            str(row.get("scenario","")),
            str(row["risk"]),
            str(row["category"]),
            "✔️" if row["success"]==True else "❌",
            str(row["details"]),
            str(row["remediation"]),
            refs,
        ])
    tbl = Table(table_data, repeatRows=1)
    tbl.setStyle(TableStyle([
        ("BACKGROUND",(0,0),(-1,0),colors.darkblue),
        ("TEXTCOLOR",(0,0),(-1,0),colors.whitesmoke),
        ("FONTNAME", (0,0),(-1,0), "Helvetica-Bold"),
        ("FONTSIZE", (0,0),(-1,0), 9),
        ("BOTTOMPADDING", (0,0),(-1,0), 6),
        ("BACKGROUND",(0,1),(-1,-1),colors.white),
        ("FONTSIZE", (0,1),(-1,-1), 8),
        ("BOX", (0,0), (-1,-1), 0.3, colors.black),
        ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
    ]))
    elements.append(tbl)
    elements.append(Spacer(1, 10))
    risky = df[df["risk"].str.lower().isin(["high","critical"])]
    if len(risky):
        elements.append(Paragraph("<b>Remediation Advice:</b>", styles["Heading4"]))
        for _, row in risky.iterrows():
            elements.append(Paragraph(f"<b>{row['name']}</b>: {row.get('remediation','No fix given')}", styles["Normal"]))
    elements.append(Spacer(1,10))
    elements.append(Paragraph("Report generated by AI Test Suite v2. All rights reserved.", styles["Italic"]))
    doc.build(elements)
    buf.seek(0)
    return buf.read()

